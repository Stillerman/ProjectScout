/Users/jts/daily/dbcs-web/app/uploaders/compliance_file_uploader_legacy.rb
This code defines a class `ComplianceFileUploaderLegacy` that handles uploading and storing compliance files for units within a property management system. It specifies a directory structure based on property, building, unit, and tenant information, and generates filenames that include the tenant's name, date, and revision number for each upload. 




/Users/jts/daily/dbcs-web/app/uploaders/mordor_binder_item_uploader_legacy.rb
This code defines a custom file uploader for a legacy system called `MordorBinderItemUploaderLegacy`.  It specifies a storage directory based on the associated property, allows only certain file types, generates unique filenames using UUIDs, and caches the generated filename for deterministic behavior. 





/Users/jts/daily/dbcs-web/app/uploaders/eiv_uploader_legacy.rb
This code defines a custom file uploader for EIV reports, handling different report types (Property and ComplianceFile).  It constructs a unique storage path based on the report type and associated data, allows only PDF uploads, and sets the filename using the report ID and a full report name. 





/Users/jts/daily/dbcs-web/app/uploaders/supplemental_file_uploader_legacy.rb
This code defines a class `SupplementalFileUploaderLegacy` that handles uploading supplemental files for a specific model.  It stores files in a directory structure based on the tenant, unit, and building information, and allows only PDF, DOC, DOCX, and XLSX file types. 





/Users/jts/daily/dbcs-web/app/uploaders/mordor_binder_item_uploader.rb
This code defines a class called `MordorBinderItemUploader` that inherits from `BaseUploader`.  It specifies that only files with extensions `.pdf`, `.doc`, `.docx`, `.xlsx`, and `.csv` are allowed to be uploaded. 





/Users/jts/daily/dbcs-web/app/uploaders/compliance_file_uploader.rb
This code defines a class `ComplianceFileUploader` that inherits from a base uploader class.  It specifies that only PDF, DOC, and DOCX files are allowed to be uploaded. 





/Users/jts/daily/dbcs-web/app/uploaders/eiv_uploader.rb
This code defines a class `EivUploader` that inherits from `BaseUploader`.  It restricts uploaded files to only PDF documents by specifying `%w(pdf)` as the allowed file extensions in the `extension_whitelist` method. 





/Users/jts/daily/dbcs-web/app/uploaders/base_uploader.rb
This code defines a base uploader class for CarrierWave, utilizing Google Cloud Storage for file storage. It generates unique filenames, creates signed URLs for accessing files, and stores files in a designated "storage" directory within Google Cloud Storage. 




/Users/jts/daily/dbcs-web/app/uploaders/acquisition_phase_uploader_legacy.rb
This code defines a custom file uploader called `AcquisitionPhaseUploaderLegacy` for handling PDF files related to property acquisitions.  It specifies a directory structure based on the property name and sets default filenames for specific file types like property deeds and investor clearance letters. 





/Users/jts/daily/dbcs-web/app/uploaders/eiv_discrepancy_uploader.rb
This code defines a class `EivDiscrepancyUploader` that inherits from `BaseUploader`.  It specifies that only PDF files are allowed to be uploaded using this uploader. 





/Users/jts/daily/dbcs-web/app/uploaders/supplemental_file_uploader.rb
This code defines a class called `SupplementalFileUploader` that inherits from a base uploader class.  It specifies that only files with extensions `.pdf`, `.doc`, `.docx`, and `.xlsx` are allowed to be uploaded. 





/Users/jts/daily/dbcs-web/app/uploaders/eiv_discrepancy_uploader_legacy.rb
This code defines a custom file uploader for EIV discrepancy reports, handling different report types (Property or ComplianceFile).  It constructs a unique storage path based on the report type and associated data, and ensures only PDF files are uploaded with a specific filename format. 




/Users/jts/daily/dbcs-web/app/uploaders/acquisition_phase_uploader.rb
This code defines a custom uploader class called `AcquisitionPhaseUploader` that inherits from a base uploader class.  It restricts uploaded files to only PDF documents by specifying `%w(pdf)` as the allowed extensions in the `extension_whitelist` method. 





/Users/jts/daily/dbcs-web/app/mailers/safe_notifier_mailer.rb
This code defines a mailer called `SafeNotifierMailer` that sends an email notification about the status of move-in EIV reports for a given property.  

The email is sent to a list of protected email addresses and includes the results of a check performed by the `Reporting::EivReportHelper` class. 





/Users/jts/daily/dbcs-web/app/mailers/resident_lifecycle_notifier_mailer.rb
This code defines a Rails mailer class called `ResidentLifecycleNotifierMailer` responsible for sending email reports.  

The mailer includes methods to send reports on unit vacancies and annual recertifications, both at the property and portfolio level, with customizable recipients and subject lines. 




/Users/jts/daily/dbcs-web/app/mailers/debug_mailer.rb
This code defines a `DebugMailer` class in Ruby on Rails that handles sending simple debug emails.  The `send_email` method allows you to send an email to a specified address with a given subject and body, rendering the body as plain text. 





/Users/jts/daily/dbcs-web/app/mailers/user_notifier_mailer.rb
This code defines a `UserNotifierMailer` class in Ruby on Rails that handles sending email notifications related to user actions.  

It includes methods for sending emails when a user is created, archived, welcomed, or needs to reset their password, ensuring notifications are sent only if email notifications are enabled and recipients are relevant. 





/Users/jts/daily/dbcs-web/app/mailers/application_mailer.rb
This code defines a base class `ApplicationMailer` for all emailers in the application, setting a default sender address and layout.  It overrides the `mail` function to redirect emails to a testing address in development mode, adding a unique identifier to the subject line. 





/Users/jts/daily/dbcs-web/app/mailers/file_notifier_mailer.rb
This code defines an email notification system for a software application that manages compliance files.  

It includes methods to send emails for various events related to file uploads, assignments, reviews, and move-out processes, customizing recipients and subject lines based on the specific event and application configuration. 




/Users/jts/daily/dbcs-web/app/mailers/eiv_report_notifier_mailer.rb
This code defines an email mailer class `EivReportNotifierMailer` that sends automated reports to property managers.  It includes two methods, `send_property_report_checkup` and `send_move_in_post_90_checkup`, which generate and send emails containing EIV report checkups for specific properties and move-in statuses. 





/Users/jts/daily/dbcs-web/app/decorators/tenant_decorator.rb
This code defines a `TenantDecorator` class that enhances the presentation of tenant data. It provides helper methods to format tenant names, display move-out reasons and financial statuses using predefined strings and classes for visual styling. 




/Users/jts/daily/dbcs-web/app/decorators/compliance_file_assignment_decorator.rb
This code defines a decorator class `ComplianceFileAssignmentDecorator` that enhances the presentation of compliance file assignments. It provides helper methods to format the assignment role, turnaround time, and due date, including displaying tooltips for due dates outside of business hours. 




/Users/jts/daily/dbcs-web/app/decorators/eiv_report_decorator.rb
This code defines a decorator class `EivReportDecorator` that extends Draper's functionality.  It provides a method `full_report_name` to retrieve the human-readable name of a report type based on a predefined mapping in `EivReport::REPORT_TYPES`. 





/Users/jts/daily/dbcs-web/app/decorators/compliance_file_decorator.rb
This code defines a decorator class `ComplianceFileDecorator` that enhances the presentation of `ComplianceFile` objects. It provides methods for formatting file types, submission/revision numbers, and displaying submission status labels, as well as helper methods for generating human-readable revision strings and user submission information. 





/Users/jts/daily/dbcs-web/app/decorators/client_decorator.rb
This code defines a decorator class `ClientDecorator` that extends Draper's functionality.  It provides helper methods `management_software_vendor_id_1_label` and `management_software_vendor_id_2_label` to dynamically generate labels based on the configured management software vendor. 





/Users/jts/daily/dbcs-web/app/decorators/audit_decorator.rb
This code defines an `AuditDecorator` class that enhances the presentation of audit objects in an application. It provides methods to generate labels for various audit statuses, publication states, and revision information, using badges and links for visual clarity. 





/Users/jts/daily/dbcs-web/app/decorators/application_decorator.rb
This code defines a decorator class called `ApplicationDecorator` that inherits from Draper::Decorator.  

This decorator class allows you to define custom methods for formatting and presenting data from objects, using Draper's helper methods like `number_to_percentage`. 





/Users/jts/daily/dbcs-web/app/decorators/audit_finding_decorator.rb
This code defines a decorator called `AuditFindingDecorator` that enhances the presentation of audit findings.  It provides a method `risk_type_text` which translates numerical risk types into more human-readable text descriptions using a predefined mapping. 





/Users/jts/daily/dbcs-web/app/decorators/unit_decorator.rb
This code defines a decorator class `UnitDecorator` that enhances the presentation of `Unit` objects in an application. It provides methods to format unit information like full name, size, funding programs, tax credit level, and vacancy status, making it more readable and user-friendly. 





/Users/jts/daily/dbcs-web/app/decorators/property_group_decorator.rb
This code defines a decorator named `PropertyGroupDecorator` that enhances the presentation of property groups in an application. It adds custom methods like `role_label` to display role-specific badges and `tooltip_text` to show a list of property names when hovering over the group. 





/Users/jts/daily/dbcs-web/app/decorators/property_decorator.rb
This code defines a decorator named `PropertyDecorator` that extends Draper's functionality. It delegates all methods to the decorated object, decorates the `units` association, and provides a method `property_type_list` to display a comma-separated list of property types. 





/Users/jts/daily/dbcs-web/app/decorators/phone_decorator.rb
This code defines a `PhoneDecorator` class that extends Draper's decorator functionality. It provides methods to format and link phone numbers (primary, mobile, and fax) using the `number_to_phone` helper and create clickable links with the `tel:` protocol. 




/Users/jts/daily/dbcs-web/app/decorators/user_decorator.rb
This code defines a `UserDecorator` class that extends Draper's decorator functionality. It delegates all methods to the underlying `User` model while providing additional methods like `full_name`, `full_name_reverse`, `title_list`, and `email_name_address` for formatting user data. 





/Users/jts/daily/dbcs-web/app/models/primary_contact.rb
This code defines a Ruby on Rails model named `PrimaryContact` that represents a primary contact person for a client.  

It establishes relationships with two other models: `client` (a one-to-many relationship) and `user` (a one-to-one relationship), indicating that each primary contact belongs to a specific client and is associated with a specific user. 





/Users/jts/daily/dbcs-web/app/models/eiv_report.rb
      {report_type:
      {report_type:
      {report_type:
      {report_type:
      {report_type:
      {report_type:
      {report_type:
      {report_type:
      {report_

/Users/jts/daily/dbcs-web/app/models/regulatory_program.rb
This code defines a `RegulatoryProgram` class that belongs to a `property`.  

It sets up paths to various JSON schema files and default value files related to different aspects of regulatory programs, such as income limits, maximum rents, and utility allowances. 




/Users/jts/daily/dbcs-web/app/models/property_group_assignment.rb
This code defines a `PropertyGroupAssignment` model, which represents a link between a property group and a property.  

The `belongs_to` associations establish relationships, allowing a `PropertyGroupAssignment` to be associated with an optional `property_group` and a required `property`. 





/Users/jts/daily/dbcs-web/app/models/employee_supervisor_assignment.rb
This code defines an `EmployeeSupervisorAssignment` model that represents the relationship between employees and their supervisors.  

It uses `belongs_to` associations to link each assignment to a specific `User` record for both the employee and the supervisor, using `employee_id` and `supervisor_id` as foreign keys. 





/Users/jts/daily/dbcs-web/app/models/unit.rb
This code defines a `Unit` model in a Ruby on Rails application, representing individual units within a building. 

It establishes relationships with other models like `Building`, `Tenant`, and `Property`, defines scopes for querying units based on various criteria (vacancy, funding type), and includes methods for calculating days to reoccupy, determining tenant status, and retrieving unit characteristics. 




/Users/jts/daily/dbcs-web/app/models/audit_finding.rb
This code defines an `AuditFinding` model in Ruby on Rails, which represents a finding during an audit process.  

It includes validations, predefined lists of possible values for various fields, and methods to calculate a risk rating and a weighted risk score based on the finding's type and severity. 




/Users/jts/daily/dbcs-web/app/models/document_binder.rb
This Ruby on Rails code defines a `DocumentBinder` model that can be associated with any type of record (`document_binderable`) through a polymorphic relationship.  It also allows for nested attributes for `document_binder_items`, enabling the creation and management of multiple items within a single binder. 





/Users/jts/daily/dbcs-web/app/models/eiv_discrepancy.rb
This code defines a Ruby on Rails model called `EivDiscrepancy` which represents discrepancies found during the EIV (Electronic Income Verification) process.  

It includes validations, associations with other models (`eiv_report` and `Tenant`), scopes to filter discrepancies based on different criteria, and a constant `ERROR_TYPES` that defines various error types with descriptions, explanations, and corrective actions. 




/Users/jts/daily/dbcs-web/app/models/current.rb
This code defines a `Current` class that inherits from `ActiveSupport::CurrentAttributes`, allowing you to store and access attributes like `user` and `true_user` within your application.  

Specifically, it seems designed to handle situations where an admin might temporarily switch to viewing the context of another user, preserving the original admin's identity in the `true_user` attribute. 





/Users/jts/daily/dbcs-web/app/models/mordor_report_row.rb
The `MordorReportRow` class represents a row in a report, likely related to properties, units, and documents.  It defines several scopes to efficiently query rows based on various criteria like property name, unit number, document reference ID, and effective date. 




/Users/jts/daily/dbcs-web/app/models/compliance_file_assignment.rb
This code defines a `ComplianceFileAssignment` model that manages assignments of compliance files to users, specifying roles (auditor or trainer) and turnaround times.  

It includes validations, callbacks for recalculating due dates and sending notifications, and enumerations for roles and turnaround times. 





/Users/jts/daily/dbcs-web/app/models/building.rb
This Ruby on Rails code defines a `Building` model that represents a building within a property.  

It establishes a one-to-many relationship with the `Property` model, meaning a building belongs to a single property, and a many-to-one relationship with the `Unit` model, indicating a building can have multiple units. 





/Users/jts/daily/dbcs-web/app/models/employee_property_assignment.rb
This code defines an `EmployeePropertyAssignment` model that represents the relationship between employees (users) and properties.  

It establishes a many-to-one relationship with the `User` model through the `employee_id` foreign key, allowing an employee to be assigned to multiple properties. 





/Users/jts/daily/dbcs-web/app/models/client.rb
The `Client` class represents a client in the application and defines its relationships with users, properties, contacts, and documents. It also includes methods for retrieving and configuring client-specific settings, such as enabled properties for certain features. 




/Users/jts/daily/dbcs-web/app/models/tenant.rb
This code defines a `Tenant` model in a Ruby on Rails application. 

It manages tenant information, including their unit, move-in/out dates, financial status, and compliance files. The model includes various associations, validations, scopes for querying tenants based on different criteria, and methods for handling recertification dates, file management, and other tenant-related operations. 




/Users/jts/daily/dbcs-web/app/models/audit.rb
The `Audit` class represents an audit record associated with a `ComplianceFile`, tracking its status, findings, and related information. It includes validations, nested attributes, callbacks, and methods for managing audit lifecycle events, notifications, and calculations. 




/Users/jts/daily/dbcs-web/app/models/property.rb
This code defines a `Property` model in an application, representing a real estate property.  

It establishes relationships with other models like `Client`, `Employee`, `Building`, `Unit`, and `ComplianceFile`, allowing for data association and retrieval.  The model also includes validations, scopes for filtering properties, and methods for calculating property-specific information. 




/Users/jts/daily/dbcs-web/app/models/application_record.rb
This code defines an abstract base class called `ApplicationRecord` that inherits from `ActiveRecord::Base`.  

This abstract class serves as a blueprint for all other models in the application, ensuring they adhere to certain conventions and functionalities provided by ActiveRecord. 



/Users/jts/daily/dbcs-web/app/models/client_property_assignment.rb
This code defines a Ruby on Rails model called `ClientPropertyAssignment`.  

It establishes a many-to-many relationship between `Client` and `Property` models, allowing a client to be associated with multiple properties and a property to be assigned to multiple clients. 





/Users/jts/daily/dbcs-web/app/models/address.rb
This Ruby code defines an `Address` class that acts as a model for storing address information.  

It uses `belongs_to :addressable, polymorphic: true` to establish a relationship with any model (polymorphic) that needs an address, allowing flexibility in associating addresses with different types of objects. 





/Users/jts/daily/dbcs-web/app/models/phone.rb
This code defines a `Phone` model in a Rails application.  

It establishes a polymorphic association with a `phoneable` object, meaning a phone can be associated with various types of models (e.g., User, Company, Address) through the `belongs_to` relationship. 





/Users/jts/daily/dbcs-web/app/models/document_binder_item.rb
This code defines a `DocumentBinderItem` model, which represents an item within a document binder.  

It establishes relationships with a `document_binder` and an `uploader` (a user), and utilizes `mount_uploader` to handle file uploads for both `document` and `document_legacy` attributes. 





/Users/jts/daily/dbcs-web/app/models/property_group.rb
This code defines a `PropertyGroup` model that belongs to a user and can have multiple properties assigned to it through a join table.  It enforces validation rules, including requiring a name, role, and description, and ensuring at least two properties are selected for the group. 





/Users/jts/daily/dbcs-web/app/models/user.rb
This code defines a `User` model in a Ruby on Rails application, handling user authentication, roles, and relationships with other models like clients, employees, and properties.  

It includes various validations, callbacks, scopes for querying users based on specific criteria, and methods for managing user data and interactions. 




/Users/jts/daily/dbcs-web/app/models/acquisition_phase.rb
This code defines an `AcquisitionPhase` model, which represents a stage in an acquisition process for a property.  

It includes validations for required fields, methods to manage file uploads for documents like property deeds and investor clearance letters, and logic to determine the acceptable date range for forms based on the acquisition effective date. 





/Users/jts/daily/dbcs-web/app/models/compliance_files/recertification.rb
This code defines a `Recertification` model, which represents annual or interim recertifications for tenants.  It includes various scopes to query recertifications based on different statuses (pending, submitted, processed) and properties, as well as methods to calculate submission deadlines, determine on-time status, and access related reports and files. 




/Users/jts/daily/dbcs-web/app/models/compliance_files/non_compliance.rb
This code defines a `NonCompliance` class, which inherits from `ComplianceFile`.  

The `NonCompliance` class sets its abbreviation to 'NC' and overrides the `can_be_reviewed?` method to return `false`, indicating that non-compliance files cannot be reviewed. 





/Users/jts/daily/dbcs-web/app/models/compliance_files/acquisition.rb
This code defines a class named `Acquisition` that inherits from `ComplianceFile`.  

The `Acquisition` class overrides the `abbreviation` method to return 'ACQ'. 





/Users/jts/daily/dbcs-web/app/models/compliance_files/application.rb
This code defines an `Application` class, which inherits from `ComplianceFile` and represents an application within a system.  

It includes methods for calculating processing time, retrieving abbreviations, managing dates (including setting an expiration date based on the oldest form date), and interacting with related data like EIV reports. 





/Users/jts/daily/dbcs-web/app/models/compliance_files/move_in.rb
The `MoveIn` class inherits from `ComplianceFile` and represents a move-in document. It provides methods to calculate the number of days between the submission date and the tenant's move-in date, retrieve income and income discrepancy reports, and returns the abbreviation 'MI'. 





/Users/jts/daily/dbcs-web/app/models/compliance_files/move_out.rb
This code defines a `MoveOut` class, which inherits from `ComplianceFile`.  

The `MoveOut` class calculates the number of days between the file's creation date and the tenant's move-out date, using the `days_to_process` method. 





/Users/jts/daily/dbcs-web/app/models/compliance_files/pandemic.rb
This code defines a `Pandemic` class that inherits from `ComplianceFile`.  

The `Pandemic` class specifies that its abbreviation is 'PAN' and that it cannot be reviewed. 





/Users/jts/daily/dbcs-web/app/models/compliance_files/compliance_file.rb
This code defines a Ruby on Rails model named `ComplianceFile` that manages compliance files for a system. 

**Key features of the model:**

* **File Management:** It handles file uploads, storage, and file type validation.
* **Tenant and Property Association:** It links to `Tenant` and `Property` models, establishing relationships.
* **Audit Trail:** It tracks audit history with `Audit` model, including status and user information.
* **Revision History:** It supports versioning through ancestry, allowing for multiple revisions of a file.
* **Search:** It uses `Searchkick` for full-text search capabilities.
* **Reports:** It integrates with `EivReport` for generating reports.
* **Notifications:** It sends email notifications upon file uploads.
* **Calculations:** It performs calculations for days to submit corrections, recertification process time, and risk ratings.

**Methods:**

* **search_data:** Generates data for search indexing.
* **file_uploaded?: Checks if a file has been uploaded.
* **application?: Checks if the file type is an application.
* **recertification?: Checks if the file type is a recertification.
* **move_in?: Checks if the file type is a move-in.
* **move_out?: Checks if the file type is a move-out.
* **pandemic?: Checks if the file type is a pandemic.
* **days_to_submit_correction: Calculates days to submit a correction.
* **average_days_to_complete_recertification_process: Calculates days to complete recertification.
* **eiv_report_types: Returns a list of EIV report types.
* **important_file_metadata: Returns important file metadata.
* **mock_filename: Generates a mock filename.

**Associations:**

* **tenant: Belongs to a tenant.
* **audit: Belongs to an audit.
* **eiv_reports: Has many EIV reports.
* **compliance_file_assignments: Has many compliance file.

**Callbacks:

* **after_create: Sends a file uploaded.
* **after_update: Sends a file uploaded.
* **after_commit: Sets the last revision.
* **after_destroy: Sets the last revision.
* **after_update: Sets the last revision.

**Constants:

* **FILE_TYPES: Defines file types.
* **COMPLIANCE_FILE_
* **REcertification_types: Defines recertification types.

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**

**



/Users/jts/daily/dbcs-web/app/models/mordor_v1/washing_machine.rb
This code defines a Ruby class called `WashingMachine` within the `MordorV1` module.  

The `WashingMachine` class is designed to parse various types of CSV files, specifically those related to property management data. It maps file names to specific parsing functions (`QID_TO_PARSER`) and handles data extraction, cleaning, and formatting.  The class also includes a method to map property names from one format to another (`map_os_property_name`). 




/Users/jts/daily/dbcs-web/app/models/mordor_v1/mordor_report.rb
The code defines a `MordorReport` class within the `MordorV1` module, which generates two types of reports: reconciliation and crosscheck.  

The `generate_reconciliation_report` method categorizes report results based on their document storage timeline ("Permanent", "Annual", or "Monthly") and stores them in respective arrays. 





/Users/jts/daily/dbcs-web/app/models/mordor_v1/mordor_rulebook.rb
This Ruby code defines a `MordorRulebook` class within the `MordorV1` module.  

It loads questions from a CSV file, categorizes them, and provides methods for generating reports, cross-checking document uploads, and finding specific questions based on their ID. 




/Users/jts/daily/dbcs-web/app/models/mordor_v1/mordor_question.rb
The `MordorQuestion` class in the `MordorV1` module represents a question from the Mordor rulebook, storing its attributes like category, section, programs, and document requirements.  It also includes methods to determine if a question is applicable to a given property based on program match and document storage level, and to check if an associated document has been uploaded. 




/Users/jts/daily/dbcs-web/app/models/client_database/base.rb
This code defines a base class `ClientDatabase::Base` that provides methods for interacting with a client database.  It uses SQL queries stored in files to retrieve data for various entities like properties, buildings, users, and tenants, and also includes functionality for executing custom reports. 




/Users/jts/daily/dbcs-web/app/models/audit_wizard_v1/audit_wizard_question.rb
The `AuditWizardQuestion` class represents a single question within an audit wizard, storing its attributes like question text, category, and associated programs and file types.  It provides methods to determine if a given compliance file matches the question's criteria based on its funding programs and file type. 




/Users/jts/daily/dbcs-web/app/models/audit_wizard_v1/audit_wizard.rb
This Ruby code defines a module `AuditWizardV1` containing a class `AuditWizard` that manages a set of audit questions.  It reads questions from a CSV file, categorizes them, and provides methods to retrieve questions based on category, file applicability, or unique ID. 





/Users/jts/daily/dbcs-web/app/models/audit_wizard_v1/audit_wizard_expense_worksheet_item.rb
This Ruby code defines a class `AuditWizardExpenseWorksheetItem` within the `AuditWizardV1` module.  The class represents a single item in an expense worksheet, parsing data from a CSV row to store information about the MSHDA checklist reference, associated programs, question reference, and annual expense amount. 




/Users/jts/daily/dbcs-web/app/models/audit_wizard_v1/audit_wizard_income_worksheet_item.rb
This Ruby code defines a class `AuditWizardIncomeWorksheetItem` within the `AuditWizardV1` module.  The class represents a single item in an income worksheet, storing information like the MSHDA checklist reference, programs, question reference, and annual gross income amount extracted from a CSV row. 




/Users/jts/daily/dbcs-web/app/models/audit_wizard_v1/audit_wizard_asset_worksheet_item.rb
This Ruby code defines a class `AuditWizardAssetWorksheetItem` within the `AuditWizardV1` module.  The class represents a single item on an asset worksheet, parsing data from a CSV row and storing attributes like MSHDA checklist reference, programs, question reference, cash value, and annual income. 





/Users/jts/daily/dbcs-web/app/models/concerns/.keep
Please provide the code you would like me to summarize. I'm ready to analyze it and give you a concise two-sentence explanation!  



/Users/jts/daily/dbcs-web/app/json_form_schemas/regulatory_agreement.json
This code defines a JSON schema for a regulatory agreement form.  

It requires fields for the total number of units and the number of units allocated to different percentage tiers (0%, 15%, 20%, etc.) up to 140%.  The schema also includes calculated fields that display the percentage of units at each tier relative to the total. 




/Users/jts/daily/dbcs-web/app/json_form_schemas/voucher_payment_standards_default_values.json
This code represents a dictionary containing counts for different types of housing units.  

Each key corresponds to a bedroom count (from single-room occupancy to 8 bedrooms), and the associated value is the number of units with that bedroom count. 





/Users/jts/daily/dbcs-web/app/json_form_schemas/maximum_rents.json
This code defines a schema for a JSON object representing maximum rents for different apartment sizes, categorized by AMGI percentage.  

It includes a table-formatted array of objects, each containing an AMGI percentage and maximum rent values for 0 to 8 bedrooms.  The schema also specifies that the data is read-only and prevents any modifications to the array structure. 




/Users/jts/daily/dbcs-web/app/json_form_schemas/maximum_rents_default_values.json
This code defines a dictionary-like structure where keys represent numerical values (0-13).  

Each key maps to another dictionary containing a "amgi_percent" value and bedroom counts (0-8 bedrooms), suggesting a mapping between a numerical value and corresponding AMGI percentage and bedroom availability. 




/Users/jts/daily/dbcs-web/app/json_form_schemas/income_limits_default_values.json
This code defines a JSON object that maps numerical keys (0-13) to corresponding values.  Each value is another object containing a "amgi_percent" key with a numerical string value, and several other keys ("1_person" to "8_person") all set to "0". 


Essentially, it represents a table where each row corresponds to a number from 0 to 13, and the "amgi_percent" value likely indicates a percentage associated with that number. 


/Users/jts/daily/dbcs-web/app/json_form_schemas/regulatory_agreement_default_values.json
This code represents a data structure containing counts and percentages for various unit values.  

Each key-value pair corresponds to a specific percentage increment (e.g., "15_percent", "20_percent"), with the value indicating the number of units at that percentage and the corresponding percentage of the total. 





/Users/jts/daily/dbcs-web/app/json_form_schemas/income_limits.json
This code defines a schema for an array of income limit objects.  

Each income limit object contains an "amgi_percent" and income values for household sizes ranging from 1 to 8 people. The schema also includes default values for various AMGI percentages and household sizes. 




/Users/jts/daily/dbcs-web/app/json_form_schemas/voucher_payment_standards.json
This code defines a JSON schema for "Voucher Payment Standards", specifying required fields and data types for various housing unit sizes.  

It includes properties for single-room occupancy and units ranging from 0 to 8 bedrooms, all of which are integers with a minimum value of 0. 





/Users/jts/daily/dbcs-web/app/json_form_schemas/utility_allowance.json
This code defines a JSON schema for a "Utility Allowance" object.  It specifies that the object requires integer values for allowances for 0 to 8 bedrooms, with a minimum value of 0 for each. 




/Users/jts/daily/dbcs-web/app/json_form_schemas/utility_allowance_default_values.json
This code defines a dictionary that stores the count of houses with a specific number of bedrooms.  

Each key represents a number of bedrooms (0 to 8), and the corresponding value is initialized to 0, indicating that no houses with that bedroom count have been recorded yet. 





/Users/jts/daily/dbcs-web/app/policies/acquisition_phase_policy.rb
This code defines an `AcquisitionPhasePolicy` class that controls access permissions for different actions related to acquisition phases.  It uses the user's role and whether they are assigned to the property associated with the acquisition phase to determine if they have permission to perform actions like creating, showing, editing, or closing the process. 





/Users/jts/daily/dbcs-web/app/policies/client_policy.rb
The `ClientPolicy` class defines authorization rules for accessing and modifying client data.  

It grants access based on the user's role, allowing administrators full access, compliance directors access to specific clients they manage, and executives and management entity employees access to update configurations for clients they are assigned to. 





/Users/jts/daily/dbcs-web/app/policies/application_policy.rb
This code defines an empty class named `ApplicationPolicy`.  

This class likely serves as a base for defining authorization policies for different resources within an application, allowing you to control which actions users are permitted to perform. 





/Users/jts/daily/dbcs-web/app/policies/user_policy.rb
This code defines a `UserPolicy` class that uses Pundit to manage authorization for user actions.  It defines various methods like `index?`, `new?`, `show?`, etc., each specifying the roles or conditions required for a user to perform a specific action related to a given user. 




/Users/jts/daily/dbcs-web/app/policies/tenant_policy.rb
The `TenantPolicy` class defines authorization rules for a user interacting with a specific tenant.  It determines if a user has permissions to perform various actions on a tenant, such as viewing, editing, or approving applications, based on their role and the tenant's status. 




/Users/jts/daily/dbcs-web/app/policies/document_binder_policy.rb
This code defines a `DocumentBinderPolicy` class that controls access to document binder functionalities based on the user's role and association with the binder.  It grants permissions for showing, uploading, and managing binders to administrators, executives, compliance directors, and users assigned to the binder's associated property or client. 





/Users/jts/daily/dbcs-web/app/policies/audit_policy.rb
The `AuditPolicy` class defines authorization rules for different actions related to audits.  It checks the user's role and the audit's status to determine if they are allowed to perform actions like creating, editing, publishing, or destroying audits. 




/Users/jts/daily/dbcs-web/app/policies/unit_policy.rb
This code defines a `UnitPolicy` class that manages authorization rules for accessing and modifying unit data.  It checks the user's role and whether they are assigned to the unit to determine if they have permission to show, edit, or update unit information. 





/Users/jts/daily/dbcs-web/app/policies/property_group_policy.rb
This code defines a `PropertyGroupPolicy` class that determines authorization levels for a user interacting with a property group.  It uses the user's role and ownership of the property group to grant or deny access to actions like indexing, creating, editing, updating, and destroying property group records. 





/Users/jts/daily/dbcs-web/app/policies/regulatory_program_policy.rb
This Ruby code defines a `RegulatoryProgramPolicy` class that manages authorization for accessing and modifying regulatory program data.  It checks the user's role (`administrator`, `executive`, `compliance_director`) and whether they are assigned to the program's property to determine if they have permission to `show`, `edit`, or `update` the program. 





/Users/jts/daily/dbcs-web/app/policies/compliance_file_policy.rb
The `ComplianceFilePolicy` class defines authorization rules for users interacting with compliance files.  

It determines whether a user can perform actions like creating, viewing, editing, deleting, auditing, or assigning files based on their role, the file's status, and other conditions. 




/Users/jts/daily/dbcs-web/app/policies/eiv_report_policy.rb
The `EivReportPolicy` class defines authorization rules for accessing and manipulating EIV reports within a system.  It determines user permissions based on their roles (administrator, compliance director, management entity employee, auditor) and their relationship to the specific EIV report or property/tenant it pertains to. 




/Users/jts/daily/dbcs-web/app/policies/property_policy.rb
The `PropertyPolicy` class defines authorization rules for accessing and modifying property configurations. It checks the user's role and whether they are assigned to the property to determine if they have permission to perform specific actions like viewing or updating configurations. 





/Users/jts/daily/dbcs-web/app/serializers/unit_autocomplete_serializer.rb
This code defines a serializer named `UnitAutocompleteSerializer` for representing unit objects in a JSON format suitable for autocomplete suggestions.  It includes attributes like ID, number, a link to the unit's details page, and tenant information, handling both occupied and vacant units. 





/Users/jts/daily/dbcs-web/app/serializers/property_serializer.rb
This code defines a Ruby serializer named `PropertySerializer` using the ActiveModel::Serializer library.  It specifies that the serializer will include the `id` and `name` attributes when representing a `Property` object as JSON. 





/Users/jts/daily/dbcs-web/app/serializers/tenant_autocomplete_serializer.rb
This code defines a serializer named `TenantAutocompleteSerializer` for representing tenant objects in a JSON format suitable for autocomplete suggestions.  

It includes attributes like ID, full name, unit number, and a link to the tenant's detail page, along with calculated status text and class based on the tenant's archived status. 





/Users/jts/daily/dbcs-web/app/serializers/api/mordor_binder_item_serializer.rb
This code defines an API serializer named `Api::MordorBinderItemSerializer` for representing MordorBinderItem objects.  It serializes attributes like `id`, `uploader`, `effective_date`, and `document_reference_id`, and customizes the `uploader` attribute to include the uploader's full name, ID, and a link to their profile. 





/Users/jts/daily/dbcs-web/app/serializers/api/mordor_binder_item_crosscheck_serializer.rb
This code defines a serializer called `Api::MordorBinderItemCrosscheckSerializer` that serializes a list of properties.  

It includes attributes like `id`, `name`, and `document_binder`, and it also defines a custom `document_binder` method that serializes the first document binder associated with the object using the `Api::MordorBinderSerializer`. 





/Users/jts/daily/dbcs-web/app/serializers/api/mordor_binder_serializer.rb
This code defines an API serializer called `Api::MordorBinderSerializer` for representing MordorBinder objects.  It includes attributes like ID, UUID, and relationships to other objects, and uses nested serializers to represent the `document_binder_items` collection. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/mi-corrections-vite.jsx
This code renders a React component called `MoveInsCorrectionsNeeded` within a designated DOM element.  It fetches the `propertyId` from a script attribute and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/unit-vacancy-vite.jsx
This code renders a React component called `UnitVacancy` within a designated HTML element on the page.  It fetches the `propertyName` and `propertyId` from script attributes and passes them as props to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/client-config-vite.jsx
This code renders a React component called `ClientConfig` within a specific DOM element identified by `#mount-client-config-here`.  It retrieves the `clientId` from a script attribute and passes it as a prop to the `ClientConfig` component, which is wrapped in a higher-order component (`HOCWrapper`). 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/eiv-page-vite.jsx
This code renders a React component called `EivPage` within a designated DOM element.  It retrieves a `propertyId` attribute from the component's container element and passes it as a prop to the `EivPage` component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/applications-expiring-vite.jsx
This code renders a React component called `ApplicationsExpiring` within a designated DOM element.  It fetches a `propertyId` from a script attribute and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/compliance-new-vite.jsx
This code renders a React component called `ComplianceFileNew` within a specific HTML element identified by the ID `mount-compliance-new-here`.  It utilizes a higher-order component (`HOCWrapper`) for potential additional functionality and encloses the rendering within a `React.StrictMode` for development-time checks. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/hello-vite.jsx
This code demonstrates a simple React application integrated with a Rails environment using Vite. It renders two paragraphs with dynamic content generated using `Math.random()` and logs messages to the console, including retrieving a test attribute from a pre-existing HTML element. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/mordor-binder-page-vite.jsx
This code renders a React component called `MordorBinderPage` within a designated DOM element.  It retrieves component-specific arguments like `property`, `binder`, and `canUploadQuestion` from script attributes and passes them to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/washing-machine-vite.jsx
This code renders a React component called `WashingMachinePage` within a designated DOM element with the ID "mount-here".  It fetches component-specific data from a JSON string stored in a script attribute with the ID "washing_machine". 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/cf-reporting-page-vite.jsx
This code renders a React component called `ComplianceFileReportingPage` within a designated DOM element identified by `#mount-cf-reporting-page-here`.  It utilizes `react-dom/client` to create a root element and `React.StrictMode` for development-time checks. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/treeview-vite.jsx
This code renders a React component called `TreeView` within a designated DOM element.  It retrieves component arguments like `binderIds` and `canUploadQuestion` from script attributes and passes them to the `TreeView` component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/mordor-question-references-vite.jsx
This code renders a React component called `QuestionReferences` within a designated DOM element.  It fetches question data from a script attribute and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/ar-vite.jsx
This code renders a React component called `AnnualRecertifications` within a specific DOM element.  It retrieves the `propertyId` from a script attribute and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/units-matrix-vite.jsx
This code renders a React component called `UnitsMatrix` within a designated DOM element.  It retrieves the `propertyId` from a script attribute and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/mordor-progress-vite.jsx
This code renders a React component called `MordorProgress` within a designated DOM element.  It retrieves component-specific attributes like `binderId`, `expandable`, and `canUploadQuestion` from the HTML element's script attributes and passes them as props to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/compliance-show-vite.jsx
This code renders a React component called `ComplianceFileShow` within a specific DOM element.  It retrieves the `complianceFileId` from a script attribute and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/compliance-overview-vite.jsx
This code renders a React component called `ComplianceOverview` within a designated DOM element.  It retrieves the `propertyId` from a script attribute and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/eiv-property-progress-vite.jsx
This code renders a React component called `EivPropertyProgress` within a specific HTML element identified by the ID `mount-eiv-property-progress-page-here`.  It utilizes React's `createRoot` function to attach the component to the DOM and employs `React.StrictMode` for development-time checks. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/eiv-compliance-progress.vite.jsx
This code renders a React component called `EivPropertyProgress` within a specific HTML element identified by the ID `mount-eiv-compliance-progress-page-here`.  It utilizes React's `createRoot` function to attach the component to the DOM and employs `React.StrictMode` for development-time checks. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/employee-dir-vite.jsx
This code renders a React component called `EmployeeDirectory` within a designated DOM element.  It fetches the `propertyId` attribute from a script tag with the id "employee-dir" and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/ugp-modal-vite.jsx
This code renders a React component called `UGPModal` within a designated DOM element.  It retrieves component-specific data, such as `propertyName` and `unitNumber`, from script attributes and passes them as props to the `UGPModal` instance. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/compliance-edit-vite.jsx
This code renders a React component called `ComplianceFileEdit` within a specific HTML element identified by the `codename` attribute.  It retrieves the `complianceFileId` from the HTML element and passes it as a prop to the `ComplianceFileEdit` component, which is wrapped in a higher-order component (`HOCWrapper`). 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/property-show-page-vite.jsx
This code renders a React component called `PropertyShowPage` within a designated DOM element.  It fetches the `propertyId` attribute from a script tag with the id "property-show-page" and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/recent-files-vite.jsx
This code renders a React component called `RecentFileSubmission` within a designated DOM element.  It retrieves the `propertyId` from a script attribute and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/tenant-card-vite.jsx
This code renders a React component called `TenantCard` within a designated DOM element.  It retrieves the `tenantId` from a script attribute and passes it as a prop to the `TenantCard` component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/user-config-vite.jsx
This code renders a React component called `UserConfig` within a specific DOM element identified by `#mount-user-config-here`.  It fetches the `userId` from a script attribute and passes it as a prop to the `UserConfig` component, which is wrapped in a higher-order component (`HOCWrapper`). 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/application.js
This code snippet demonstrates how to integrate Vite, a JavaScript bundler, with a Rails application. It provides instructions on including Vite tags in the HTML template and showcases examples of importing Rails libraries and stylesheets within a Vite environment. 




/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/eiv-overview-vite.jsx
This code renders a React component called `EivOverview` within a designated DOM element.  It retrieves the `propertyId` from a script attribute and passes it as a prop to the component. 





/Users/jts/daily/dbcs-web/app/javascript-vite/entrypoints/unit-card-vite.jsx
This code renders a React component called `UnitCard` within a specific DOM element.  It retrieves the `unitId` attribute from a script tag with the id "unit-card" and passes it as a prop to the `UnitCard` component. 





/Users/jts/daily/dbcs-web/app/javascript/.DS_Store










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































/Users/jts/daily/dbcs-web/app/javascript/packs/application.js
This code snippet configures React Rails UJS to use component files located within the "components" directory.  It achieves this by utilizing `require.context` to dynamically load components relative to the current directory and then registering them with React Rails UJS. 





/Users/jts/daily/dbcs-web/app/javascript/packs/server_rendering.js
This code snippet configures React on the server-side for rendering. It sets up a require context to load React components and initializes ReactRailsUJS, which integrates React with Rails. 





/Users/jts/daily/dbcs-web/app/javascript/components/excelUtils.js
This code defines functions for exporting data to both Excel and CSV formats.  

It uses `flattenObj` to transform nested objects into a flat structure suitable for export, and then utilizes libraries like `xlsx` and `file-saver` to generate and save the respective files. 





/Users/jts/daily/dbcs-web/app/javascript/components/JSONPretty.jsx
This React component, `JSONPretty`, takes JSON data as input. It then renders the data in a prettified format using backticks and indentation within a Markdown component for display. 





/Users/jts/daily/dbcs-web/app/javascript/components/UnitCard.jsx
This React component, `UnitCard`, displays information about a specific unit, including its regulatory program data, funding programs, tenant history, and edit link if the user has permission. It utilizes React Query for data fetching and Primereact components for UI elements like buttons and dialogs. 




/Users/jts/daily/dbcs-web/app/javascript/components/KismetAccordion.jsx
This React component, `KismetAccordion`, creates an expandable accordion element. It takes a header, body, and an optional `expandable` prop to control whether the content can be expanded or collapsed. 





/Users/jts/daily/dbcs-web/app/javascript/components/bridge.js
This code defines a set of asynchronous functions (`kismetFetch` and others) that fetch data from a backend API using Axios.  

The functions are designed to retrieve various types of data related to properties, units, compliance files, and EIV reports, incorporating parameters like property IDs, dates, and authorization tokens from a `window.react_state` object. 




/Users/jts/daily/dbcs-web/app/javascript/components/TreeView.jsx
This React component, `FileSystemNavigator`, displays a hierarchical tree view of report results fetched from an API endpoint.  

It allows users to navigate through binders and questions, view their status (resolved or not), and upload documents for unresolved questions if authorized.  The component utilizes the `primereact/tree` library for rendering the tree structure and `react-toastify` for displaying loading and error messages. 




/Users/jts/daily/dbcs-web/app/javascript/components/HOC.jsx
This code defines a higher-order component (HOC) called `HOC` that wraps any given component with React Query and a ToastContainer for displaying notifications.  

The HOC utilizes a `QueryClient` to manage data fetching and caching, and the `ToastContainer` is positioned at the bottom-right corner of the screen. 





/Users/jts/daily/dbcs-web/app/javascript/components/Badge.jsx
This code defines a reusable React component called `Badge` that displays text with customizable styling based on provided props.  

It also includes several helper components (`ArBadge`, `FinancialStatusBadge`, `MoveOutReasonBadge`, and `AuditStatusBadge`) that utilize the `Badge` component to display specific status information with appropriate colors and links. 




/Users/jts/daily/dbcs-web/app/javascript/components/DateHelper.jsx
This code defines a `dateMap` object to map numerical month values to their corresponding names and provides two functions for formatting dates and datetimes.  

The `prettyPrintDate` function formats a date string in YYYY-MM-DD format to M/D/YYYY, while `prettyPrintDatetime` formats a datetime string to M/D/YYYY h:mm A. 





/Users/jts/daily/dbcs-web/app/javascript/components/UserConfig.jsx
The `UserConfig` component allows a user to edit their configuration settings, such as notification preferences.  It utilizes React Query to fetch user data and a JSON editor to display and modify the configuration, while also incorporating permission checks to ensure only authorized users can make changes. 





/Users/jts/daily/dbcs-web/app/javascript/components/TenantCard.jsx
This React component, `TenantCard`, displays information about a specific tenant, including their personal details, move-in/out dates, financial status, and archive status. It fetches tenant data using `kismetFetch` and `react-query`, and allows editing or unarchiving the tenant if the user has the necessary permissions. 




/Users/jts/daily/dbcs-web/app/javascript/components/ClientConfig.jsx
The `ClientConfig` component allows authorized users to view and update the configuration of a specific client. It utilizes React Query to fetch client data and a JSON editor to manage the configuration schema, while displaying a progress spinner during loading and a button to trigger the configuration dialog. 




/Users/jts/daily/dbcs-web/app/javascript/components/DropZone.jsx
This React component, `KismetDropzone`, allows users to drag and drop files, specifically PDF, CSV, text files, or to upload them by clicking.  It utilizes the `react-dropzone` library for file handling, `react-toastify` for notifications, and `superagent` to send the uploaded file to a specified URL with optional parameters. 





/Users/jts/daily/dbcs-web/app/javascript/components/CurrencyHelper.jsx
This code defines a function `prettyPrintDollar` that formats a numerical price as a US dollar amount using the Intl.NumberFormat API.  It also provides a `range` function that generates an array of consecutive numbers within a specified range. 





/Users/jts/daily/dbcs-web/app/javascript/components/ProgressBar.jsx
This React component, `ProgressBar`, renders a customizable progress bar with two segments.  

It allows for dynamic percentage values, text labels, and styling options for each segment, including animation. 





/Users/jts/daily/dbcs-web/app/javascript/components/RegulatoryProgramTables.jsx
This React component, `RegulatoryProgramTables`, displays various regulatory program data in a tabbed format.  

It presents income limits, maximum rents, utility allowances, voucher payment standards, and regulatory agreement details, dynamically highlighting information relevant to the provided unit. 




/Users/jts/daily/dbcs-web/app/javascript/components/KismetJSONEditor.tsx
This code defines a React component called `KismetJSONEditor` that renders a JSON Schema form using the `@rjsf/core` library.  It utilizes custom widgets for selecting users, tenants, properties, and toggling switches, fetching data from an API using `kismetFetch` and `react-query`. 




/Users/jts/daily/dbcs-web/app/javascript/components/hooks/usePropertySelector.jsx
This code defines three React hooks for managing property selection: `usePropertySelector`, `usePropertySelectorById`, and `usePropertySelectorByIdSimple`.  

These hooks provide functionality to display and manage a multi-select dropdown of properties, allowing users to choose one or more properties from a list fetched from an API.  They also handle URL parameter synchronization and optional quick-fill functionality based on property groups. 




/Users/jts/daily/dbcs-web/app/javascript/components/hooks/useUrlParams.jsx
This code defines several React hooks for managing URL parameters as state variables.  

It provides hooks for handling boolean, integer, and string URL parameters, allowing developers to easily synchronize their application state with the URL and update the URL accordingly. 





/Users/jts/daily/dbcs-web/app/javascript/components/hooks/useEffectiveDate.jsx
This code defines two React hooks, `useEffectiveDate` and `useEffectiveDateWithUrl`, both designed to manage and display an effective date.  

`useEffectiveDate` provides a basic implementation with state management for the effective month and year, while `useEffectiveDateWithUrl` incorporates URL parameter synchronization to persist the effective date across page navigations. 





/Users/jts/daily/dbcs-web/app/javascript/components/hooks/useEffectDebugger.jsx
This code defines a custom hook called `useEffectDebugger` that helps identify which dependencies caused a `useEffect` hook to re-run.  It does this by tracking the previous values of the dependencies and logging any changes to the console. 





/Users/jts/daily/dbcs-web/app/javascript/components/hooks/useUuid.jsx
This React hook, `useUuid`, generates a unique universally unique identifier (UUID) when the component mounts.  It uses the `uuid` library to create a new UUID and stores it in the `uuid` state variable, which is then returned for use in the component. 





